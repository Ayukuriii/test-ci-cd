# name: Deploy lo to remote

# on:
#   push:
#     branches: [main]

# jobs:
#   zero:
#     name: try to scan
#     runs-on: ubuntu-latest
#     steps:
#       - name: Run Dastardly Action Step
#         continue-on-error: true # This allows subsequent steps to run even if this step fails
#         uses: PortSwigger/dastardly-github-action@main
#         with:
#           target-url: "https://dev.goalsacademy.id"
#   first:
#     name: Pull from github
#     needs: zero
#     runs-on: ubuntu-latest
#     steps:
#       - name: deploy goalsacademy - pulling
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HOST }}
#           username: ${{ secrets.USERNAME }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           # password: ${{ secrets.PASSWORD }}
#           port: ${{ secrets.PORT }}
#           script: |
#             cd ${{ secrets.DIR }}
#             git pull origin main && composer install && composer update && php artisan optimize
#             php artisan config:clear
#             php artisan storage:link

name: Deploy to remote

on:
  push:
    branches: [main]

jobs:
  create-depeloyment-artifacts:
    name: Create deployment artifacts
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - name: Create CSS and Javascript
        run: |
          npm install
          npm run build

      - name: Configure PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml

      - name: Install composer dependencies
        run: composer install --prefer-dist --no-dev --no-interaction

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules *

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

  prepare-release-on-server:
    runs-on: ubuntu-latest
    needs: create-depeloyment-artifacts
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: app-build
      
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ secrets.DIR }}/artifacts

      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "${{ secrets.DIR }}/releases/${GITHUB_SHA}"
            tar xzf ${{ secrets.DIR }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ secrets.DIR }}/releases/${GITHUB_SHA}"
